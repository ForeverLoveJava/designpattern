package java.test.designpattern.singleton.lazy;

/**
 * 懒汉式单例
 * 双重检查方法，保证线程安全
 */
public class DoubleCheckLazySingleton {
    private DoubleCheckLazySingleton(){}//私有化构造方法

    private static DoubleCheckLazySingleton INSTANCE = null;//创建常量

    public static DoubleCheckLazySingleton getINSTANCE(){//创建全局访问方法
        if(null == INSTANCE){//多个线程调用此方法时，判断INSTANCE常量是否为空，为空则进入同步方法中创建实例

            synchronized (DoubleCheckLazySingleton.class){

                if(null == INSTANCE){//如果有多个线程在调用此方法，判断一次INSTANCE是否为空，为空则创建实例。
                    INSTANCE = new DoubleCheckLazySingleton();
                   /* CPU执行会转换成jvm指令
                            1.分配内存给这个对象
                            2.初始化对象
                            3.将初始化对象和内存地址关联、赋值
                            4.用户初次访问
                            但是在多线程中，2、3步骤可能会颠倒顺序，这就是指令重排序
                            为了解决这一问题，java推出volatile(反复无常的、不稳定的)关键字*/
                }
            }
        }

        return INSTANCE;
    }
}
